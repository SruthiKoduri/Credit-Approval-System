from django.core.management.base import BaseCommand
from loans.models import Customer, Loan
import pandas as pd

class Command(BaseCommand):
    def handle(self, *args, **kwargs):
        self.stdout.write('Loading customer data...')
        try:
            df = pd.read_excel('data/customer_data.xlsx')
            for _, row in df.iterrows():
                Customer.objects.update_or_create(
                    customer_id=row['Customer ID'],
                    defaults={
                        'first_name': row['First Name'],
                        'last_name': row['Last Name'],
                        'age': row['Age'],
                        'phone_number': int(row['Phone Number']),
                        'monthly_salary': row['Monthly Salary'],
                        'approved_limit': row['Approved Limit'],
                        'current_debt': 0
                    }
                )
            self.stdout.write(self.style.SUCCESS(f'Loaded {len(df)} customers'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(str(e)))
        
        self.stdout.write('Loading loan data...')
        try:
            df = pd.read_excel('data/loan_data.xlsx')
            for _, row in df.iterrows():
                try:
                    customer = Customer.objects.get(customer_id=row['Customer ID'])
                    Loan.objects.update_or_create(
                        loan_id=row['Loan ID'],
                        defaults={
                            'customer': customer,
                            'loan_amount': row['Loan Amount'],
                            'tenure': row['Tenure'],
                            'interest_rate': row['Interest Rate'],
                            'monthly_repayment': row['Monthly payment'],
                            'emis_paid_on_time': row['EMIs paid on Time'],
                            'start_date': row['Date of Approval'],
                            'end_date': row['End Date']
                        }
                    )
                except:
                    pass
            self.stdout.write(self.style.SUCCESS(f'Loaded {len(df)} loans'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(str(e)))
